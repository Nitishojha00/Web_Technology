// let s = 'abc';
// // let s ="abc";
// // let s = `abc`;
// console.log(s);


// ðŸ”¹ String Methods

// 1. Searching and Finding

// charAt(index) â†’ Character at given index.

// charCodeAt(index) â†’ Unicode (UTF-16) code at index.

// codePointAt(index) â†’ Unicode code point (for emojis, etc).

// indexOf(searchValue, fromIndex) â†’ First occurrence index.

// lastIndexOf(searchValue, fromIndex) â†’ Last occurrence index.

// includes(searchValue, fromIndex) â†’ Boolean if substring exists.

// startsWith(searchValue, position) â†’ Boolean if string starts with value.

// endsWith(searchValue, length) â†’ Boolean if string ends with value.

// search(regexp) â†’ Index matching regex.

// 2. Extracting Substrings

// slice(start, end) â†’ Extracts part of string.

// substring(start, end) â†’ Similar to slice but swaps negative/greater indexes.

// substr(start, length) â†’ (deprecated but still works).

// 3. Modifying / Creating New Strings

// concat(str1, str2, â€¦) â†’ Joins strings.

// repeat(count) â†’ Repeats string.

// replace(searchValue, replaceValue) â†’ Replace first occurrence.

// replaceAll(searchValue, replaceValue) â†’ Replace all occurrences.

// toLowerCase() â†’ Convert to lowercase.

// toUpperCase() â†’ Convert to uppercase.

// trim() â†’ Remove whitespace from both sides.

// trimStart() / trimLeft() â†’ Remove whitespace at start.

// trimEnd() / trimRight() â†’ Remove whitespace at end.

// padStart(targetLength, padString) â†’ Pad at start.

// padEnd(targetLength, padString) â†’ Pad at end.

// 4. Splitting and Matching

// split(separator, limit) â†’ Splits into array.

// match(regexp) â†’ Array of matches.

// matchAll(regexp) â†’ Iterator of all matches.

// localeCompare(compareString) â†’ Compare according to locale.

// 5. Conversion

// toString() â†’ Returns string itself.

// valueOf() â†’ Returns primitive value of String object.

// toLocaleLowerCase() â†’ Locale-sensitive lowercase.

// toLocaleUpperCase() â†’ Locale-sensitive uppercase.

// normalize([form]) â†’ Unicode normalization (NFC, NFD, NFKC, NFKD).

// 6. Iteration

// String.prototype[Symbol.iterator] â†’ Allows strings to be iterable (e.g., for...of).

// at(index) â†’ Returns character at index (supports negative indexes